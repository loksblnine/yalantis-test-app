{"version":3,"sources":["constants.js","components/DataView/ElementView/index.js","redux/actions/dataActions.js","components/DataView/index.js","components/Sidebar/SidebarDataView/SidebarElementView/index.js","components/Sidebar/SidebarDataView/index.js","components/Sidebar/index.js","App.js","redux/reducers/dataReducer.js","redux/store.js","serviceWorker.js","index.js"],"names":["ACTION_TYPE_SET_DATA","ACTION_TYPE_SET_ACTIVE_USERS","ACTION_TYPE_ADD_ACTIVE_USER","ACTION_TYPE_REMOVE_ACTIVE_USER","DATA_REDUCER_KEY","ALPHABET","LOCAL_STORAGE_KEY_ACTIVE_USERS","MONTHS_LIST","moment","CURRENT_MONTH_INDEX","month","MONTHS","slice","ElementView","element","dispatch","useDispatch","className","active","firstName","lastName","htmlFor","id","type","name","checked","onChange","newUser","payload","userToRemove","React","memo","prevProps","nextProps","_","DataView","data","activeUsers","letter","dataToShow","useMemo","filter","el","toLowerCase","startsWith","sort","a","b","localeCompare","map","includes","length","SidebarElementView","SidebarDataView","dob","toUpperCase","Sidebar","useSelector","state","App","loading","setLoading","getData","fetch","then","response","json","newData","setDataAction","newActiveUsers","storageActiveUsers","localStorage","getItem","JSON","parse","setItem","stringify","initialState","store","createStore","combineReducers","action","Array","from","Set","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f9551251.chunk.js","sourcesContent":["import * as moment from 'moment';\n\nexport const ACTION_TYPE_SET_DATA = 'SET_DATA';\nexport const ACTION_TYPE_SET_ACTIVE_USERS = 'SET_ACTIVE_USERS';\n\nexport const ACTION_TYPE_ADD_ACTIVE_USER = 'ADD_ACTIVE_USER';\nexport const ACTION_TYPE_REMOVE_ACTIVE_USER = 'REMOVE_ACTIVE_USER';\n\nexport const DATA_REDUCER_KEY = 'dataStorage';\n\nexport const ALPHABET = [\n  'A',\n  'B',\n  'C',\n  'D',\n  'E',\n  'F',\n  'G',\n  'H',\n  'I',\n  'J',\n  'K',\n  'L',\n  'M',\n  'N',\n  'O',\n  'P',\n  'Q',\n  'R',\n  'S',\n  'T',\n  'U',\n  'V',\n  'W',\n  'X',\n  'Y',\n  'Z',\n];\n\nexport const DATA_URL =\n  'https://yalantis-react-school-api.yalantis.com/api/task0/users';\n\nexport const LOCAL_STORAGE_KEY_ACTIVE_USERS = 'activeUsers';\n\nconst MONTHS_LIST = moment.months();\nconst CURRENT_MONTH_INDEX = moment().month();\n\nexport const MONTHS = [\n  ...MONTHS_LIST.slice(CURRENT_MONTH_INDEX),\n  ...MONTHS_LIST.slice(0, CURRENT_MONTH_INDEX),\n];\n","import React from \"react\";\nimport {\n  addActiveUserAction,\n  removeActiveUserAction,\n} from \"../../../redux/actions/dataActions\";\nimport { useDispatch } from \"react-redux\";\nimport * as _ from \"lodash\";\n\nconst ElementView = ({ element }) => {\n  const dispatch = useDispatch();\n\n  return (\n    <div className=\"after-each-row\">\n      <div className={element.active ? \"active\" : \"\"}>\n        {`${element.firstName} ${element.lastName}`}\n      </div>\n      <div className=\"radio-bar\">\n        <label htmlFor={`active-radio-${element.id}`}>\n          Active\n          <input\n            id={`active-radio-${element.id}`}\n            type=\"radio\"\n            name={element.lastName}\n            checked={element.active}\n            onChange={() => {\n              dispatch(addActiveUserAction(element.id));\n            }}\n          />\n        </label>\n        <label htmlFor={`not-active-radio-${element.id}`} >\n          Not Active\n          <input\n            id={`not-active-radio-${element.id}`}\n            type=\"radio\"\n            name={element.lastName}\n            checked={!element.active}\n            onChange={() => {\n              dispatch(removeActiveUserAction(element.id));\n            }}\n          />\n        </label>\n      </div>\n    </div>\n  );\n};\n\nexport default React.memo(ElementView, (prevProps, nextProps) =>\n  _.isEqual(prevProps.element, nextProps.element)\n);\n","import {\n  ACTION_TYPE_ADD_ACTIVE_USER,\n  ACTION_TYPE_REMOVE_ACTIVE_USER,\n  ACTION_TYPE_SET_ACTIVE_USERS,\n  ACTION_TYPE_SET_DATA,\n} from \"../../constants\";\n\nexport const setDataAction = (newData) => ({\n  type: ACTION_TYPE_SET_DATA,\n  payload: newData,\n});\n\nexport const addActiveUserAction = (newUser) => ({\n  type: ACTION_TYPE_ADD_ACTIVE_USER,\n  payload: newUser,\n});\n\nexport const removeActiveUserAction = (userToRemove) => ({\n  type: ACTION_TYPE_REMOVE_ACTIVE_USER,\n  payload: userToRemove,\n});\n\nexport const setActiveUsers = (newActiveUsers) => ({\n  type: ACTION_TYPE_SET_ACTIVE_USERS,\n  payload: newActiveUsers,\n});\n","import React from 'react';\nimport ElementView from './ElementView';\n\nconst DataView = ({data, activeUsers, letter}) => {\n  const dataToShow = React.useMemo(\n    () =>\n      data\n        .filter((el) =>\n          el.lastName.toLowerCase().startsWith(letter.toLowerCase()),\n        )\n        .sort((a, b) => a.lastName.localeCompare(b.lastName))\n        .map((el) => ({\n          ...el,\n          active: activeUsers.includes(el.id),\n        })),\n    [data, letter, activeUsers],\n  );\n\n  if (!dataToShow.length) {\n    return (\n      <div>\n        <div className=\"letter-style\">{letter}</div>\n        <div>-</div>\n      </div>\n    );\n  }\n  return (\n    <div>\n      <div className=\"letter-style\">{letter}</div>\n      {dataToShow.map((el) => (\n        <ElementView key={el.id} element={el} />\n      ))}\n    </div>\n  );\n};\n\nexport default DataView;\n","import React from \"react\";\nimport * as _ from \"lodash\";\n\nconst SidebarElementView = ({ element }) => (\n  <div>{`${element.firstName} ${element.lastName}`}</div>\n);\n\nexport default React.memo(SidebarElementView, (prevProps, nextProps) =>\n  _.isEqual(prevProps.element, nextProps.element)\n);\n","import React from \"react\";\nimport * as moment from \"moment\";\nimport { MONTHS } from \"../../../constants\";\nimport SidebarElementView from \"./SidebarElementView\";\n\nconst SidebarDataView = ({ month, data }) => {\n  const dataToShow = React.useMemo(\n    () =>\n      data\n        .filter((el) => month === MONTHS[moment(el.dob).month()])\n        .sort((a, b) => a.lastName.localeCompare(b.lastName)),\n    [data, month]\n  );\n\n  if (!dataToShow.length) {\n    return null;\n  }\n\n  return (\n    <div>\n      <div className=\"month\">{month.toUpperCase()}</div>\n      {dataToShow.map((el) => (\n        <SidebarElementView key={el.id} element={el} />\n      ))}\n    </div>\n  );\n};\n\nexport default SidebarDataView;\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { DATA_REDUCER_KEY, MONTHS } from \"../../constants\";\nimport SidebarDataView from \"./SidebarDataView\";\n\nconst Sidebar = () => {\n  const { data, activeUsers } = useSelector((state) => state[DATA_REDUCER_KEY]);\n\n  const dataToShow = React.useMemo(\n    () => data.filter((el) => activeUsers.includes(el.id)),\n    [data, activeUsers]\n  );\n\n  return (\n    <div className=\"sidebar\">\n      <div className=\"info\">\n        {dataToShow.length ? \"Employees birthday\" : \"Employees List is empty\"}\n      </div>\n      {MONTHS.map((month) => (\n        <SidebarDataView month={month} data={dataToShow} key={month} />\n      ))}\n    </div>\n  );\n};\n\nexport default Sidebar;\n","import * as React from \"react\";\nimport \"./App.css\";\nimport {\n  ALPHABET,\n  DATA_REDUCER_KEY,\n  DATA_URL,\n  LOCAL_STORAGE_KEY_ACTIVE_USERS,\n} from \"./constants\";\nimport { DataView, Sidebar } from \"./components\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setActiveUsers, setDataAction } from \"./redux/actions/dataActions\";\n\nconst App = () => {\n  const [loading, setLoading] = React.useState(false);\n\n  const { data, activeUsers } = useSelector((state) => state[DATA_REDUCER_KEY]);\n  const dispatch = useDispatch();\n\n  const getData = React.useCallback(() => {\n    fetch(DATA_URL)\n      .then((response) => response.json())\n      .then((newData) => {\n        dispatch(setDataAction(newData));\n        setLoading(false);\n      });\n  }, [dispatch]);\n\n  React.useEffect(() => {\n    getData();\n\n    const storageActiveUsers = localStorage.getItem(\n      LOCAL_STORAGE_KEY_ACTIVE_USERS\n    );\n\n    if (storageActiveUsers) {\n      dispatch(setActiveUsers(JSON.parse(storageActiveUsers)));\n    }\n  }, [getData, dispatch]);\n\n  React.useEffect(() => {\n    localStorage.setItem(\n      LOCAL_STORAGE_KEY_ACTIVE_USERS,\n      JSON.stringify(activeUsers)\n    );\n  }, [activeUsers]);\n\n  if (loading) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <div className=\"content\">\n      {ALPHABET.map((letter) => (\n        <DataView\n          letter={letter}\n          data={data}\n          activeUsers={activeUsers}\n          key={letter}\n        />\n      ))}\n      <Sidebar />\n    </div>\n  );\n};\n\nexport default App;\n","import {\n  ACTION_TYPE_ADD_ACTIVE_USER,\n  ACTION_TYPE_REMOVE_ACTIVE_USER,\n  ACTION_TYPE_SET_ACTIVE_USERS,\n  ACTION_TYPE_SET_DATA,\n} from \"../../constants\";\n\nconst initialState = {\n  data: [],\n  activeUsers: [],\n};\n\nexport const dataReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ACTION_TYPE_SET_DATA: {\n      return {\n        ...state,\n        data: action.payload,\n      };\n    }\n    case ACTION_TYPE_ADD_ACTIVE_USER: {\n      return {\n        ...state,\n        activeUsers: Array.from(\n          new Set([...state.activeUsers, action.payload])\n        ),\n      };\n    }\n    case ACTION_TYPE_REMOVE_ACTIVE_USER: {\n      return {\n        ...state,\n        activeUsers: state.activeUsers.filter((el) => el !== action.payload),\n      };\n    }\n    case ACTION_TYPE_SET_ACTIVE_USERS: {\n      return {\n        ...state,\n        activeUsers: action.payload,\n      };\n    }\n    default: {\n      return state;\n    }\n  }\n};\n","import { combineReducers, createStore } from \"redux\";\nimport { dataReducer } from \"./reducers/dataReducer\";\nimport { DATA_REDUCER_KEY } from \"../constants\";\n\nexport const store = createStore(\n  combineReducers({\n    [DATA_REDUCER_KEY]: dataReducer,\n  })\n);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { store } from \"./redux/store\";\nimport { Provider } from \"react-redux\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}